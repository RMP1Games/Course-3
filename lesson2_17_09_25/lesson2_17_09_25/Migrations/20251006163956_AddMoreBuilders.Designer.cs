// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lesson2_17_09_25;

#nullable disable

namespace lesson2_17_09_25.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251006163956_AddMoreBuilders")]
    partial class AddMoreBuilders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("CourseTest", b =>
                {
                    b.Property<int>("CourseesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseesId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("test_courses", (string)null);
                });

            modelBuilder.Entity("DirectionTest", b =>
                {
                    b.Property<int>("DirectionsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DirectionsId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("test_directions", (string)null);
                });

            modelBuilder.Entity("GroupStudent", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("GroupStudent");
                });

            modelBuilder.Entity("GroupTest", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupsId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("test_groups", (string)null);
                });

            modelBuilder.Entity("ProjectTest", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectsId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("test_projects", (string)null);
                });

            modelBuilder.Entity("StudentTest", b =>
                {
                    b.Property<int>("StudentsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentsId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("test_students", (string)null);
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Attempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("EndedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 10, 6, 16, 39, 55, 983, DateTimeKind.Unspecified).AddTicks(6931), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId");

                    b.ToTable("Attempt");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DirectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DirectionId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswerType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsScoring")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestId", "Number")
                        .IsUnique();

                    b.ToTable("Question");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VkProfileLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 10, 6, 16, 39, 55, 979, DateTimeKind.Unspecified).AddTicks(5764), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<DateTimeOffset>("Deadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripton")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRepeatable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassingScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("PublishedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttemptId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AttemptId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TestId", "StudentId", "AttemptId")
                        .IsUnique();

                    b.ToTable("TestResult");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 10, 6, 16, 39, 55, 965, DateTimeKind.Unspecified).AddTicks(7643), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.UserAttemptAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttemptId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScoreAwarded")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("AttemptId", "QuestionId")
                        .IsUnique();

                    b.ToTable("UserAttemptAnswer");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.UserSelectedOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AswerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserAttemptAnswerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AswerId");

                    b.HasIndex("UserAttemptAnswerId");

                    b.ToTable("UserSelectedOption");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.UserTextAnwer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TextAnswer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserAttemptAnswerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserAttemptAnswerId")
                        .IsUnique();

                    b.ToTable("UserTextAnwer");
                });

            modelBuilder.Entity("CourseTest", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectionTest", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Direction", null)
                        .WithMany()
                        .HasForeignKey("DirectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupStudent", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupTest", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectTest", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentTest", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Answer", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Attempt", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Student", "Student")
                        .WithMany("Attempts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.Test", "Test")
                        .WithMany("Attempts")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Group", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.Direction", "Description")
                        .WithMany("Groups")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.Project", "Project")
                        .WithMany("Groups")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Description");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Question", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Student", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("lesson2_17_09_25.Models.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.TestResult", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Attempt", "Attempt")
                        .WithMany("TestResults")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.Student", "Student")
                        .WithMany("TestResults")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.Test", "Test")
                        .WithMany("TestResults")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.UserAttemptAnswer", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Attempt", "Attempt")
                        .WithMany("UserAttemptAnswers")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.Question", "Question")
                        .WithMany("UserAttemptAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.UserSelectedOption", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.Answer", "Answer")
                        .WithMany("UserSelectedOptions")
                        .HasForeignKey("AswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lesson2_17_09_25.Models.UserAttemptAnswer", "UserAttemptAnswer")
                        .WithMany("UserSelectedOptions")
                        .HasForeignKey("UserAttemptAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("UserAttemptAnswer");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.UserTextAnwer", b =>
                {
                    b.HasOne("lesson2_17_09_25.Models.UserAttemptAnswer", "UserAttemptAnswer")
                        .WithOne("UserTextAnwer")
                        .HasForeignKey("lesson2_17_09_25.Models.UserTextAnwer", "UserAttemptAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAttemptAnswer");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Answer", b =>
                {
                    b.Navigation("UserSelectedOptions");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Attempt", b =>
                {
                    b.Navigation("TestResults");

                    b.Navigation("UserAttemptAnswers");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Course", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Direction", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Project", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("UserAttemptAnswers");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Student", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.Test", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("Questions");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.User", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("lesson2_17_09_25.Models.UserAttemptAnswer", b =>
                {
                    b.Navigation("UserSelectedOptions");

                    b.Navigation("UserTextAnwer");
                });
#pragma warning restore 612, 618
        }
    }
}
